import json
from typing import List

from django.core.management.base import BaseCommand


class Command(BaseCommand):
    """メッセージ生成コマンド
    """

    # ヘルプ
    help =\
        "server/sudokuapp/management/commands/res/src_msg.json" +\
        "を元にTypeScriptとPython用のメッセージ関連コードを生成"

    def handle(self, *args, **options):
        """コマンド実行時のエントリーポイント
        """
        main()


def main():
    """メッセージ生成メイン処理
    """

    BR: str = "\n"
    AUTO_GEN: str = "create_msg.py"

    # MsgCode.py
    msg_code_py: str = ""
    msg_code_py += "from enum import Enum, auto{}".format(BR)
    msg_code_py += "{}".format(BR)
    msg_code_py += "{}".format(BR)
    msg_code_py += "class MsgCode(Enum):{}".format(BR)
    msg_code_py += "    \"\"\"メッセージコード{}".format(BR)
    msg_code_py += "{}".format(BR)
    msg_code_py += "    auto generated by {}{}".format(AUTO_GEN, BR)
    msg_code_py += "    \"\"\"{}".format(BR)

    # MsgCode.ts
    msg_code_ts: str = ""
    msg_code_ts += "/**{}".format(BR)
    msg_code_ts += " * メッセージコード{}".format(BR)
    msg_code_ts += " *{}".format(BR)
    # クライアント側には記載しない方がいいのだろうけど、どうせgitで公開するし。。
    msg_code_ts += " * メッセージコードに紐づくメッセージテキストは@/assets/msg.jsonを参照{}".format(BR)
    msg_code_ts += " * @generator {}{}".format(AUTO_GEN, BR)
    msg_code_ts += " */{}".format(BR)
    msg_code_ts += "enum MsgCode {" + BR

    # msg.json(py)
    msg_json_py: str = ""
    msg_json_py += "{" + BR

    # msg.json(ts)
    msg_json_ts: str = ""
    msg_json_ts += "{" + BR

    msg_code_py_list: List[str] = list()
    msg_code_ts_list: List[str] = list()
    msg_json_py_list: List[str] = list()
    msg_json_ts_list: List[str] = list()

    with open(
            "./sudokuapp/management/commands/res/src_msg.json",
            mode="r",
            encoding="utf-8"
    ) as f:
        msg_json_dict = json.load(f)
        for idx, (code, detail) in enumerate(msg_json_dict.items()):
            if detail["py"]:
                # MsgCode.py
                msg_code_py_list.append("")
                msg_code_py_list.append("    # {}".format(detail["name"]))
                msg_code_py_list.append("    # {}".format(detail["msg"]))
                msg_code_py_list.append("    {} = auto()".format(code))

                # msg.json(py)
                msg_json_py_list.append(
                    "  \"{}\": \"{}\",".format(code, detail["msg"]))

            if detail["ts"]:
                # MsgCode.ts
                if len(msg_code_ts_list) != 0:
                    msg_code_ts_list.append("")
                msg_code_ts_list.append("  /**")
                msg_code_ts_list.append("   * {}".format(detail["name"]))
                msg_code_ts_list.append("   *")
                msg_code_ts_list.append("   * {}".format(detail["msg"]))
                msg_code_ts_list.append("   */")
                msg_code_ts_list.append("  {} = \"{}\",".format(code, code))

                # msg.json(ts)
                msg_json_ts_list.append(
                    "  \"{}\": \"{}\",".format(code, detail["msg"]))

    last_ts = msg_code_ts_list.pop(-1)
    msg_code_ts_list.append(last_ts.replace(",", ""))
    last_json_py = msg_json_py_list.pop(-1)
    msg_json_py_list.append(last_json_py.replace(",", ""))
    last_json_ts = msg_json_ts_list.pop(-1)
    msg_json_ts_list.append(last_json_ts.replace(",", ""))

    for wk in msg_code_py_list:
        msg_code_py += wk + BR
    for wk in msg_code_ts_list:
        msg_code_ts += wk + BR
    for wk in msg_json_ts_list:
        msg_json_ts += wk + BR
    for wk in msg_json_py_list:
        msg_json_py += wk + BR

    msg_code_ts += "}" + BR
    msg_code_ts += "{}".format(BR)
    msg_code_ts += "export default MsgCode;{}".format(BR)

    msg_json_py += "}"
    msg_json_ts += "}"

    print("MsgCode.py ###########")
    print(msg_code_py)
    print("######################")

    print("MsgCode.ts  ##########")
    print(msg_code_ts)
    print("######################")

    print("msg.json(py)  ############")
    print(msg_json_py)
    print("######################")

    print("msg.json(ts)  ############")
    print(msg_json_ts)
    print("######################")

    with open(
            "./sudokuapp/const/MsgCode.py",
            mode="w",
            encoding="utf-8"
    ) as f:
        f.writelines(msg_code_py)

    with open(
            "../client/src/const/MsgCode.ts",
            mode="w",
            encoding="utf-8"
    ) as f:
        f.writelines(msg_code_ts)

    with open(
            "./sudokuapp/resources/msg.json",
            mode="w",
            encoding="utf-8"
    ) as f:
        f.writelines(msg_json_py)

    with open(
            "../client/src/assets/msg.json",
            mode="w",
            encoding="utf-8"
    ) as f:
        f.writelines(msg_json_ts)
